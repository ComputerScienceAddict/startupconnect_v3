-- Create opportunities table (simplified version)
CREATE TABLE IF NOT EXISTS public.opportunities (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  description TEXT,
  company_name TEXT,
  location TEXT,
  remote_friendly BOOLEAN DEFAULT false,
  compensation_type TEXT,
  compensation_amount DECIMAL,
  duration TEXT,
  required_skills TEXT,
  applicants INTEGER DEFAULT 0,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create events table with improved schema
CREATE TABLE IF NOT EXISTS public.events (
  id UUID PRIMARY KEY DEFAULT extensions.uuid_generate_v4(),
  created_by UUID NOT NULL REFERENCES public.user_profiles(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  description TEXT,
  start_at TIMESTAMPTZ NOT NULL,
  end_at TIMESTAMPTZ,
  all_day BOOLEAN DEFAULT false,
  location TEXT,
  is_virtual BOOLEAN DEFAULT false,
  registration_url TEXT,
  price_cents INTEGER CHECK (price_cents IS NULL OR price_cents >= 0),
  capacity INTEGER CHECK (capacity IS NULL OR capacity >= 0),
  visibility TEXT NOT NULL DEFAULT 'public'
    CHECK (visibility = ANY (ARRAY['public','private','unlisted'])),
  status TEXT NOT NULL DEFAULT 'scheduled'
    CHECK (status = ANY (ARRAY['scheduled','cancelled','postponed'])),
  tags TEXT[],
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Update posts table to remove old columns
ALTER TABLE public.posts DROP COLUMN IF EXISTS post_type;
ALTER TABLE public.posts DROP COLUMN IF EXISTS opportunity_type;
ALTER TABLE public.posts DROP COLUMN IF EXISTS remote_friendly;
ALTER TABLE public.posts DROP COLUMN IF EXISTS compensation_type;
ALTER TABLE public.posts DROP COLUMN IF EXISTS compensation_amount;
ALTER TABLE public.posts DROP COLUMN IF EXISTS duration;
ALTER TABLE public.posts DROP COLUMN IF EXISTS required_skills;

-- Create likes table AFTER opportunities and events exist
CREATE TABLE IF NOT EXISTS public.likes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  post_id UUID REFERENCES public.posts(id) ON DELETE CASCADE,
  opportunity_id UUID REFERENCES public.opportunities(id) ON DELETE CASCADE,
  event_id UUID REFERENCES public.events(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT likes_content_check CHECK (
    (post_id IS NOT NULL AND opportunity_id IS NULL AND event_id IS NULL) OR
    (post_id IS NULL AND opportunity_id IS NOT NULL AND event_id IS NULL) OR
    (post_id IS NULL AND opportunity_id IS NULL AND event_id IS NOT NULL)
  ),
  UNIQUE (post_id, user_id),
  UNIQUE (opportunity_id, user_id),
  UNIQUE (event_id, user_id)
);

-- Applications table for opportunities
CREATE TABLE IF NOT EXISTS public.applications (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  opportunity_id UUID NOT NULL REFERENCES public.opportunities(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  status TEXT DEFAULT 'pending',
  cover_letter TEXT,
  resume_url TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE (opportunity_id, user_id),
  CONSTRAINT applications_pkey PRIMARY KEY (id)
);

-- Event registrations table
CREATE TABLE IF NOT EXISTS public.event_registrations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  event_id UUID NOT NULL REFERENCES public.events(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  status TEXT DEFAULT 'registered',
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE (event_id, user_id)
);

-- Add indexes for better performance
CREATE INDEX IF NOT EXISTS idx_opportunities_user_id ON public.opportunities(user_id);
CREATE INDEX IF NOT EXISTS idx_opportunities_is_active ON public.opportunities(is_active);
CREATE INDEX IF NOT EXISTS idx_opportunities_created_at ON public.opportunities(created_at);

CREATE INDEX IF NOT EXISTS idx_events_creator ON public.events(created_by);
CREATE INDEX IF NOT EXISTS idx_events_start ON public.events(start_at);
CREATE INDEX IF NOT EXISTS idx_events_active ON public.events(is_active);
CREATE INDEX IF NOT EXISTS idx_events_visibility ON public.events(visibility, is_active);
CREATE INDEX IF NOT EXISTS idx_events_tags_gin ON public.events USING GIN (tags);

CREATE INDEX IF NOT EXISTS idx_likes_post_id ON public.likes(post_id);
CREATE INDEX IF NOT EXISTS idx_likes_opportunity_id ON public.likes(opportunity_id);
CREATE INDEX IF NOT EXISTS idx_likes_event_id ON public.likes(event_id);
CREATE INDEX IF NOT EXISTS idx_likes_user_id ON public.likes(user_id);

CREATE INDEX IF NOT EXISTS idx_applications_opportunity_id ON public.applications(opportunity_id);
CREATE INDEX IF NOT EXISTS idx_applications_user_id ON public.applications(user_id);
CREATE INDEX IF NOT EXISTS idx_applications_status ON public.applications(status);

CREATE INDEX IF NOT EXISTS idx_event_registrations_event_id ON public.event_registrations(event_id);
CREATE INDEX IF NOT EXISTS idx_event_registrations_user_id ON public.event_registrations(user_id);
CREATE INDEX IF NOT EXISTS idx_event_registrations_status ON public.event_registrations(status);

-- Keep updated_at fresh for events
CREATE TRIGGER update_events_updated_at
  BEFORE UPDATE ON public.events
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Row Level Security for opportunities
ALTER TABLE public.opportunities ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "opportunities_select_any" ON public.opportunities;
CREATE POLICY "opportunities_select_any" ON public.opportunities
FOR SELECT USING (is_active = true);

DROP POLICY IF EXISTS "opportunities_insert_self" ON public.opportunities;
CREATE POLICY "opportunities_insert_self" ON public.opportunities
FOR INSERT WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "opportunities_update_self" ON public.opportunities;
CREATE POLICY "opportunities_update_self" ON public.opportunities
FOR UPDATE USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "opportunities_delete_self" ON public.opportunities;
CREATE POLICY "opportunities_delete_self" ON public.opportunities
FOR DELETE USING (auth.uid() = user_id);

-- Row Level Security for events
ALTER TABLE public.events ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "events_select_any" ON public.events;
CREATE POLICY "events_select_any" ON public.events
FOR SELECT USING (is_active = true AND visibility = 'public');

DROP POLICY IF EXISTS "events_insert_self" ON public.events;
CREATE POLICY "events_insert_self" ON public.events
FOR INSERT WITH CHECK (auth.uid() = created_by);

DROP POLICY IF EXISTS "events_update_self" ON public.events;
CREATE POLICY "events_update_self" ON public.events
FOR UPDATE USING (auth.uid() = created_by);

DROP POLICY IF EXISTS "events_delete_self" ON public.events;
CREATE POLICY "events_delete_self" ON public.events
FOR DELETE USING (auth.uid() = created_by);

-- Row Level Security for likes
ALTER TABLE public.likes ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "likes_select_any" ON public.likes;
CREATE POLICY "likes_select_any" ON public.likes
FOR SELECT USING (true);

DROP POLICY IF EXISTS "likes_insert_self" ON public.likes;
CREATE POLICY "likes_insert_self" ON public.likes
FOR INSERT WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "likes_delete_self" ON public.likes;
CREATE POLICY "likes_delete_self" ON public.likes
FOR DELETE USING (auth.uid() = user_id);

-- RLS for applications
ALTER TABLE public.applications ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "applications_select_any" ON public.applications;
CREATE POLICY "applications_select_any" ON public.applications
FOR SELECT USING (true);

DROP POLICY IF EXISTS "applications_insert_self" ON public.applications;
CREATE POLICY "applications_insert_self" ON public.applications
FOR INSERT WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "applications_update_self" ON public.applications;
CREATE POLICY "applications_update_self" ON public.applications
FOR UPDATE USING (auth.uid() = user_id);

-- RLS for event registrations
ALTER TABLE public.event_registrations ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "event_registrations_select_any" ON public.event_registrations;
CREATE POLICY "event_registrations_select_any" ON public.event_registrations
FOR SELECT USING (true);

DROP POLICY IF EXISTS "event_registrations_insert_self" ON public.event_registrations;
CREATE POLICY "event_registrations_insert_self" ON public.event_registrations
FOR INSERT WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "event_registrations_update_self" ON public.event_registrations;
CREATE POLICY "event_registrations_update_self" ON public.event_registrations
FOR UPDATE USING (auth.uid() = user_id); 